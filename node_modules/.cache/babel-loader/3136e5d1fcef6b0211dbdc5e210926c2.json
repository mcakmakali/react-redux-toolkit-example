{"ast":null,"code":"import { rest, setupWorker } from 'msw';\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data';\nimport { nanoid } from '@reduxjs/toolkit';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nimport { Server as MockSocketServer } from 'mock-socket';\nimport { setRandom } from 'txtgen';\nimport { parseISO } from 'date-fns';\nconst NUM_USERS = 3;\nconst POSTS_PER_USER = 3;\nconst RECENT_NOTIFICATIONS_DAYS = 7; // Add an extra delay to all endpoints, so loading spinners show up.\n\nconst ARTIFICIAL_DELAY_MS = 2000;\n/* RNG setup */\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\n\nlet useSeededRNG = true;\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = array => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n/* MSW Data Model Setup */\n\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post')\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user')\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post')\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post')\n  }\n});\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName()\n  };\n};\n\nconst createPostData = user => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create()\n  };\n}; // Create an initial set of users and posts\n\n\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData());\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author);\n    db.post.create(newPost);\n  }\n}\n\nconst serializePost = post => ({ ...post,\n  user: post.user.id\n});\n/* MSW REST API Handlers */\n\n\nexport const handlers = [rest.get('/fakeApi/posts', function (req, res, ctx) {\n  const posts = db.post.getAll().map(serializePost);\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts));\n}), rest.post('/fakeApi/posts', function (req, res, ctx) {\n  const data = req.body;\n\n  if (data.content === 'error') {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.status(500), ctx.json('Server error saving this post!'));\n  }\n\n  data.date = new Date().toISOString();\n  const user = db.user.findFirst({\n    where: {\n      id: {\n        equals: data.user\n      }\n    }\n  });\n  data.user = user;\n  data.reactions = db.reaction.create();\n  const post = db.post.create(data);\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n}), rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n  const post = db.post.findFirst({\n    where: {\n      id: {\n        equals: req.params.postId\n      }\n    }\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n}), rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n  const {\n    id,\n    ...data\n  } = req.body;\n  const updatedPost = db.post.update({\n    where: {\n      id: {\n        equals: req.params.postId\n      }\n    },\n    data\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(updatedPost)));\n}), rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n  const post = db.post.findFirst({\n    where: {\n      id: {\n        equals: req.params.postId\n      }\n    }\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json({\n    comments: post.comments\n  }));\n}), rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n  const postId = req.params.postId;\n  const reaction = req.body.reaction;\n  const post = db.post.findFirst({\n    where: {\n      id: {\n        equals: postId\n      }\n    }\n  });\n  const updatedPost = db.post.update({\n    where: {\n      id: {\n        equals: postId\n      }\n    },\n    data: {\n      reactions: { ...post.reactions,\n        [reaction]: post.reactions[reaction] += 1\n      }\n    }\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(updatedPost)));\n}), rest.get('/fakeApi/notifications', (req, res, ctx) => {\n  const numNotifications = getRandomInt(1, 5);\n  let notifications = generateRandomNotifications(undefined, numNotifications, db);\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications));\n}), rest.get('/fakeApi/users', (req, res, ctx) => {\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()));\n})];\nexport const worker = setupWorker(...handlers); // worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost');\nlet currentSocket;\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj));\n}; // Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\n\n\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5);\n  const notifications = generateRandomNotifications(since, numNotifications, db);\n  sendMessage(socket, {\n    type: 'notifications',\n    payload: notifications\n  });\n};\n\nexport const forceGenerateNotifications = since => {\n  sendRandomNotifications(currentSocket, since);\n};\nsocketServer.on('connection', socket => {\n  currentSocket = socket;\n  socket.on('message', data => {\n    const message = JSON.parse(data);\n\n    switch (message.type) {\n      case 'notifications':\n        {\n          const since = message.payload;\n          sendRandomNotifications(socket, since);\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n});\n/* Random Notifications Generation */\n\nconst notificationTemplates = ['poked you', 'says hi!', `is glad we're friends`, 'sent you a gift'];\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date();\n  let pastDate;\n\n  if (since) {\n    pastDate = parseISO(since);\n  } else {\n    pastDate = new Date(now.valueOf());\n    pastDate.setMinutes(pastDate.getMinutes() - 15);\n  } // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n\n\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll());\n    const template = randomFromArray(notificationTemplates);\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id\n    };\n  });\n  return notifications;\n}","map":{"version":3,"names":["rest","setupWorker","factory","oneOf","manyOf","primaryKey","nanoid","faker","seedrandom","Server","MockSocketServer","setRandom","parseISO","NUM_USERS","POSTS_PER_USER","RECENT_NOTIFICATIONS_DAYS","ARTIFICIAL_DELAY_MS","useSeededRNG","rng","randomSeedString","localStorage","getItem","seedDate","Date","toISOString","setItem","seed","getTime","getRandomInt","min","max","Math","ceil","floor","randomFromArray","array","index","length","db","user","id","firstName","String","lastName","name","username","posts","post","title","date","content","reactions","comments","comment","text","reaction","thumbsUp","Number","hooray","heart","rocket","eyes","createUserData","internet","userName","createPostData","lorem","words","recent","paragraphs","create","i","author","j","newPost","serializePost","handlers","get","req","res","ctx","getAll","map","delay","json","data","body","status","findFirst","where","equals","params","postId","patch","updatedPost","update","numNotifications","notifications","generateRandomNotifications","undefined","worker","socketServer","currentSocket","sendMessage","socket","obj","send","JSON","stringify","sendRandomNotifications","since","type","payload","forceGenerateNotifications","on","message","parse","notificationTemplates","now","pastDate","valueOf","setMinutes","getMinutes","Array","template","between"],"sources":["/Users/mcakmakali/Desktop/redux-example/src/api/server.js"],"sourcesContent":["import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n"],"mappings":"AAAA,SAASA,IAAT,EAAeC,WAAf,QAAkC,KAAlC;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiCC,UAAjC,QAAmD,aAAnD;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,MAAM,IAAIC,gBAAnB,QAA2C,aAA3C;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,QAAyB,UAAzB;AAEA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,yBAAyB,GAAG,CAAlC,C,CAEA;;AACA,MAAMC,mBAAmB,GAAG,IAA5B;AAEA;AAEA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,IAAnB;AAEA,IAAIC,GAAG,GAAGV,UAAU,EAApB;;AAEA,IAAIS,YAAJ,EAAkB;EAChB,IAAIE,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,qBAArB,CAAvB;EACA,IAAIC,QAAJ;;EAEA,IAAIH,gBAAJ,EAAsB;IACpBG,QAAQ,GAAG,IAAIC,IAAJ,CAASJ,gBAAT,CAAX;EACD,CAFD,MAEO;IACLG,QAAQ,GAAG,IAAIC,IAAJ,EAAX;IACAJ,gBAAgB,GAAGG,QAAQ,CAACE,WAAT,EAAnB;IACAJ,YAAY,CAACK,OAAb,CAAqB,qBAArB,EAA4CN,gBAA5C;EACD;;EAEDD,GAAG,GAAGV,UAAU,CAACW,gBAAD,CAAhB;EACAR,SAAS,CAACO,GAAD,CAAT;EACAX,KAAK,CAACmB,IAAN,CAAWJ,QAAQ,CAACK,OAAT,EAAX;AACD;;AAED,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;EAC9BD,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;EACAC,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;EACA,OAAOC,IAAI,CAACE,KAAL,CAAWf,GAAG,MAAMY,GAAG,GAAGD,GAAN,GAAY,CAAlB,CAAd,IAAsCA,GAA7C;AACD;;AAED,MAAMK,eAAe,GAAIC,KAAD,IAAW;EACjC,MAAMC,KAAK,GAAGR,YAAY,CAAC,CAAD,EAAIO,KAAK,CAACE,MAAN,GAAe,CAAnB,CAA1B;EACA,OAAOF,KAAK,CAACC,KAAD,CAAZ;AACD,CAHD;AAKA;;;AAEA,OAAO,MAAME,EAAE,GAAGpC,OAAO,CAAC;EACxBqC,IAAI,EAAE;IACJC,EAAE,EAAEnC,UAAU,CAACC,MAAD,CADV;IAEJmC,SAAS,EAAEC,MAFP;IAGJC,QAAQ,EAAED,MAHN;IAIJE,IAAI,EAAEF,MAJF;IAKJG,QAAQ,EAAEH,MALN;IAMJI,KAAK,EAAE1C,MAAM,CAAC,MAAD;EANT,CADkB;EASxB2C,IAAI,EAAE;IACJP,EAAE,EAAEnC,UAAU,CAACC,MAAD,CADV;IAEJ0C,KAAK,EAAEN,MAFH;IAGJO,IAAI,EAAEP,MAHF;IAIJQ,OAAO,EAAER,MAJL;IAKJS,SAAS,EAAEhD,KAAK,CAAC,UAAD,CALZ;IAMJiD,QAAQ,EAAEhD,MAAM,CAAC,SAAD,CANZ;IAOJmC,IAAI,EAAEpC,KAAK,CAAC,MAAD;EAPP,CATkB;EAkBxBkD,OAAO,EAAE;IACPb,EAAE,EAAEnC,UAAU,CAACqC,MAAD,CADP;IAEPO,IAAI,EAAEP,MAFC;IAGPY,IAAI,EAAEZ,MAHC;IAIPK,IAAI,EAAE5C,KAAK,CAAC,MAAD;EAJJ,CAlBe;EAwBxBoD,QAAQ,EAAE;IACRf,EAAE,EAAEnC,UAAU,CAACC,MAAD,CADN;IAERkD,QAAQ,EAAEC,MAFF;IAGRC,MAAM,EAAED,MAHA;IAIRE,KAAK,EAAEF,MAJC;IAKRG,MAAM,EAAEH,MALA;IAMRI,IAAI,EAAEJ,MANE;IAORV,IAAI,EAAE5C,KAAK,CAAC,MAAD;EAPH;AAxBc,CAAD,CAAlB;;AAmCP,MAAM2D,cAAc,GAAG,MAAM;EAC3B,MAAMrB,SAAS,GAAGlC,KAAK,CAACqC,IAAN,CAAWH,SAAX,EAAlB;EACA,MAAME,QAAQ,GAAGpC,KAAK,CAACqC,IAAN,CAAWD,QAAX,EAAjB;EAEA,OAAO;IACLF,SADK;IAELE,QAFK;IAGLC,IAAI,EAAG,GAAEH,SAAU,IAAGE,QAAS,EAH1B;IAILE,QAAQ,EAAEtC,KAAK,CAACwD,QAAN,CAAeC,QAAf;EAJL,CAAP;AAMD,CAVD;;AAYA,MAAMC,cAAc,GAAI1B,IAAD,IAAU;EAC/B,OAAO;IACLS,KAAK,EAAEzC,KAAK,CAAC2D,KAAN,CAAYC,KAAZ,EADF;IAELlB,IAAI,EAAE1C,KAAK,CAAC0C,IAAN,CAAWmB,MAAX,CAAkBrD,yBAAlB,EAA6CS,WAA7C,EAFD;IAGLe,IAHK;IAILW,OAAO,EAAE3C,KAAK,CAAC2D,KAAN,CAAYG,UAAZ,EAJJ;IAKLlB,SAAS,EAAEb,EAAE,CAACiB,QAAH,CAAYe,MAAZ;EALN,CAAP;AAOD,CARD,C,CAUA;;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1D,SAApB,EAA+B0D,CAAC,EAAhC,EAAoC;EAClC,MAAMC,MAAM,GAAGlC,EAAE,CAACC,IAAH,CAAQ+B,MAAR,CAAeR,cAAc,EAA7B,CAAf;;EAEA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3D,cAApB,EAAoC2D,CAAC,EAArC,EAAyC;IACvC,MAAMC,OAAO,GAAGT,cAAc,CAACO,MAAD,CAA9B;IACAlC,EAAE,CAACS,IAAH,CAAQuB,MAAR,CAAeI,OAAf;EACD;AACF;;AAED,MAAMC,aAAa,GAAI5B,IAAD,KAAW,EAC/B,GAAGA,IAD4B;EAE/BR,IAAI,EAAEQ,IAAI,CAACR,IAAL,CAAUC;AAFe,CAAX,CAAtB;AAKA;;;AAEA,OAAO,MAAMoC,QAAQ,GAAG,CACtB5E,IAAI,CAAC6E,GAAL,CAAS,gBAAT,EAA2B,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;EAClD,MAAMlC,KAAK,GAAGR,EAAE,CAACS,IAAH,CAAQkC,MAAR,GAAiBC,GAAjB,CAAqBP,aAArB,CAAd;EACA,OAAOI,GAAG,CAACC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CAAD,EAAiCgE,GAAG,CAACI,IAAJ,CAAStC,KAAT,CAAjC,CAAV;AACD,CAHD,CADsB,EAKtB9C,IAAI,CAAC+C,IAAL,CAAU,gBAAV,EAA4B,UAAU+B,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;EACnD,MAAMK,IAAI,GAAGP,GAAG,CAACQ,IAAjB;;EAEA,IAAID,IAAI,CAACnC,OAAL,KAAiB,OAArB,EAA8B;IAC5B,OAAO6B,GAAG,CACRC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CADQ,EAERgE,GAAG,CAACO,MAAJ,CAAW,GAAX,CAFQ,EAGRP,GAAG,CAACI,IAAJ,CAAS,gCAAT,CAHQ,CAAV;EAKD;;EAEDC,IAAI,CAACpC,IAAL,GAAY,IAAI1B,IAAJ,GAAWC,WAAX,EAAZ;EAEA,MAAMe,IAAI,GAAGD,EAAE,CAACC,IAAH,CAAQiD,SAAR,CAAkB;IAAEC,KAAK,EAAE;MAAEjD,EAAE,EAAE;QAAEkD,MAAM,EAAEL,IAAI,CAAC9C;MAAf;IAAN;EAAT,CAAlB,CAAb;EACA8C,IAAI,CAAC9C,IAAL,GAAYA,IAAZ;EACA8C,IAAI,CAAClC,SAAL,GAAiBb,EAAE,CAACiB,QAAH,CAAYe,MAAZ,EAAjB;EAEA,MAAMvB,IAAI,GAAGT,EAAE,CAACS,IAAH,CAAQuB,MAAR,CAAee,IAAf,CAAb;EACA,OAAON,GAAG,CAACC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CAAD,EAAiCgE,GAAG,CAACI,IAAJ,CAAST,aAAa,CAAC5B,IAAD,CAAtB,CAAjC,CAAV;AACD,CAnBD,CALsB,EAyBtB/C,IAAI,CAAC6E,GAAL,CAAS,wBAAT,EAAmC,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;EAC1D,MAAMjC,IAAI,GAAGT,EAAE,CAACS,IAAH,CAAQyC,SAAR,CAAkB;IAC7BC,KAAK,EAAE;MAAEjD,EAAE,EAAE;QAAEkD,MAAM,EAAEZ,GAAG,CAACa,MAAJ,CAAWC;MAArB;IAAN;EADsB,CAAlB,CAAb;EAGA,OAAOb,GAAG,CAACC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CAAD,EAAiCgE,GAAG,CAACI,IAAJ,CAAST,aAAa,CAAC5B,IAAD,CAAtB,CAAjC,CAAV;AACD,CALD,CAzBsB,EA+BtB/C,IAAI,CAAC6F,KAAL,CAAW,wBAAX,EAAqC,CAACf,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EACtD,MAAM;IAAExC,EAAF;IAAM,GAAG6C;EAAT,IAAkBP,GAAG,CAACQ,IAA5B;EACA,MAAMQ,WAAW,GAAGxD,EAAE,CAACS,IAAH,CAAQgD,MAAR,CAAe;IACjCN,KAAK,EAAE;MAAEjD,EAAE,EAAE;QAAEkD,MAAM,EAAEZ,GAAG,CAACa,MAAJ,CAAWC;MAArB;IAAN,CAD0B;IAEjCP;EAFiC,CAAf,CAApB;EAIA,OAAON,GAAG,CACRC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CADQ,EAERgE,GAAG,CAACI,IAAJ,CAAST,aAAa,CAACmB,WAAD,CAAtB,CAFQ,CAAV;AAID,CAVD,CA/BsB,EA2CtB9F,IAAI,CAAC6E,GAAL,CAAS,iCAAT,EAA4C,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EAC7D,MAAMjC,IAAI,GAAGT,EAAE,CAACS,IAAH,CAAQyC,SAAR,CAAkB;IAC7BC,KAAK,EAAE;MAAEjD,EAAE,EAAE;QAAEkD,MAAM,EAAEZ,GAAG,CAACa,MAAJ,CAAWC;MAArB;IAAN;EADsB,CAAlB,CAAb;EAGA,OAAOb,GAAG,CACRC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CADQ,EAERgE,GAAG,CAACI,IAAJ,CAAS;IAAEhC,QAAQ,EAAEL,IAAI,CAACK;EAAjB,CAAT,CAFQ,CAAV;AAID,CARD,CA3CsB,EAqDtBpD,IAAI,CAAC+C,IAAL,CAAU,kCAAV,EAA8C,CAAC+B,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EAC/D,MAAMY,MAAM,GAAGd,GAAG,CAACa,MAAJ,CAAWC,MAA1B;EACA,MAAMrC,QAAQ,GAAGuB,GAAG,CAACQ,IAAJ,CAAS/B,QAA1B;EACA,MAAMR,IAAI,GAAGT,EAAE,CAACS,IAAH,CAAQyC,SAAR,CAAkB;IAC7BC,KAAK,EAAE;MAAEjD,EAAE,EAAE;QAAEkD,MAAM,EAAEE;MAAV;IAAN;EADsB,CAAlB,CAAb;EAIA,MAAME,WAAW,GAAGxD,EAAE,CAACS,IAAH,CAAQgD,MAAR,CAAe;IACjCN,KAAK,EAAE;MAAEjD,EAAE,EAAE;QAAEkD,MAAM,EAAEE;MAAV;IAAN,CAD0B;IAEjCP,IAAI,EAAE;MACJlC,SAAS,EAAE,EACT,GAAGJ,IAAI,CAACI,SADC;QAET,CAACI,QAAD,GAAaR,IAAI,CAACI,SAAL,CAAeI,QAAf,KAA4B;MAFhC;IADP;EAF2B,CAAf,CAApB;EAUA,OAAOwB,GAAG,CACRC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CADQ,EAERgE,GAAG,CAACI,IAAJ,CAAST,aAAa,CAACmB,WAAD,CAAtB,CAFQ,CAAV;AAID,CArBD,CArDsB,EA2EtB9F,IAAI,CAAC6E,GAAL,CAAS,wBAAT,EAAmC,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EACpD,MAAMgB,gBAAgB,GAAGpE,YAAY,CAAC,CAAD,EAAI,CAAJ,CAArC;EAEA,IAAIqE,aAAa,GAAGC,2BAA2B,CAC7CC,SAD6C,EAE7CH,gBAF6C,EAG7C1D,EAH6C,CAA/C;EAMA,OAAOyC,GAAG,CAACC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CAAD,EAAiCgE,GAAG,CAACI,IAAJ,CAASa,aAAT,CAAjC,CAAV;AACD,CAVD,CA3EsB,EAsFtBjG,IAAI,CAAC6E,GAAL,CAAS,gBAAT,EAA2B,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EAC5C,OAAOD,GAAG,CAACC,GAAG,CAACG,KAAJ,CAAUnE,mBAAV,CAAD,EAAiCgE,GAAG,CAACI,IAAJ,CAAS9C,EAAE,CAACC,IAAH,CAAQ0C,MAAR,EAAT,CAAjC,CAAV;AACD,CAFD,CAtFsB,CAAjB;AA2FP,OAAO,MAAMmB,MAAM,GAAGnG,WAAW,CAAC,GAAG2E,QAAJ,CAA1B,C,CACP;;AAEA;;AAEA,MAAMyB,YAAY,GAAG,IAAI3F,gBAAJ,CAAqB,gBAArB,CAArB;AAEA,IAAI4F,aAAJ;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;EACnCD,MAAM,CAACE,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAZ;AACD,CAFD,C,CAIA;AACA;;;AACA,MAAMI,uBAAuB,GAAG,CAACL,MAAD,EAASM,KAAT,KAAmB;EACjD,MAAMd,gBAAgB,GAAGpE,YAAY,CAAC,CAAD,EAAI,CAAJ,CAArC;EAEA,MAAMqE,aAAa,GAAGC,2BAA2B,CAACY,KAAD,EAAQd,gBAAR,EAA0B1D,EAA1B,CAAjD;EAEAiE,WAAW,CAACC,MAAD,EAAS;IAAEO,IAAI,EAAE,eAAR;IAAyBC,OAAO,EAAEf;EAAlC,CAAT,CAAX;AACD,CAND;;AAQA,OAAO,MAAMgB,0BAA0B,GAAIH,KAAD,IAAW;EACnDD,uBAAuB,CAACP,aAAD,EAAgBQ,KAAhB,CAAvB;AACD,CAFM;AAIPT,YAAY,CAACa,EAAb,CAAgB,YAAhB,EAA+BV,MAAD,IAAY;EACxCF,aAAa,GAAGE,MAAhB;EAEAA,MAAM,CAACU,EAAP,CAAU,SAAV,EAAsB7B,IAAD,IAAU;IAC7B,MAAM8B,OAAO,GAAGR,IAAI,CAACS,KAAL,CAAW/B,IAAX,CAAhB;;IAEA,QAAQ8B,OAAO,CAACJ,IAAhB;MACE,KAAK,eAAL;QAAsB;UACpB,MAAMD,KAAK,GAAGK,OAAO,CAACH,OAAtB;UACAH,uBAAuB,CAACL,MAAD,EAASM,KAAT,CAAvB;UACA;QACD;;MACD;QACE;IAPJ;EASD,CAZD;AAaD,CAhBD;AAkBA;;AAEA,MAAMO,qBAAqB,GAAG,CAC5B,WAD4B,EAE5B,UAF4B,EAG3B,uBAH2B,EAI5B,iBAJ4B,CAA9B;;AAOA,SAASnB,2BAAT,CAAqCY,KAArC,EAA4Cd,gBAA5C,EAA8D1D,EAA9D,EAAkE;EAChE,MAAMgF,GAAG,GAAG,IAAI/F,IAAJ,EAAZ;EACA,IAAIgG,QAAJ;;EAEA,IAAIT,KAAJ,EAAW;IACTS,QAAQ,GAAG3G,QAAQ,CAACkG,KAAD,CAAnB;EACD,CAFD,MAEO;IACLS,QAAQ,GAAG,IAAIhG,IAAJ,CAAS+F,GAAG,CAACE,OAAJ,EAAT,CAAX;IACAD,QAAQ,CAACE,UAAT,CAAoBF,QAAQ,CAACG,UAAT,KAAwB,EAA5C;EACD,CAT+D,CAWhE;EACA;;;EACA,MAAMzB,aAAa,GAAG,CAAC,GAAG0B,KAAK,CAAC3B,gBAAD,CAAT,EAA6Bd,GAA7B,CAAiC,MAAM;IAC3D,MAAM3C,IAAI,GAAGL,eAAe,CAACI,EAAE,CAACC,IAAH,CAAQ0C,MAAR,EAAD,CAA5B;IACA,MAAM2C,QAAQ,GAAG1F,eAAe,CAACmF,qBAAD,CAAhC;IACA,OAAO;MACL7E,EAAE,EAAElC,MAAM,EADL;MAEL2C,IAAI,EAAE1C,KAAK,CAAC0C,IAAN,CAAW4E,OAAX,CAAmBN,QAAnB,EAA6BD,GAA7B,EAAkC9F,WAAlC,EAFD;MAGL2F,OAAO,EAAES,QAHJ;MAILrF,IAAI,EAAEA,IAAI,CAACC;IAJN,CAAP;EAMD,CATqB,CAAtB;EAWA,OAAOyD,aAAP;AACD"},"metadata":{},"sourceType":"module"}