{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!'\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text'\n}];\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload);\n      },\n      prepare: (title, content, userId) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toDateString\n          }\n        };\n      }\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","user","date","Date","toDateString","postUpdated","existingPost","find","post","actions"],"sources":["/Users/mcakmakali/Desktop/redux-example/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst initialState = [\n    { id: '1', title: 'First Post!', content: 'Hello!' },\n    { id: '2', title: 'Second Post', content: 'More text' }\n];\n\nexport const postsSlice  = createSlice({\n    name : 'posts',\n    initialState,\n    reducers:{\n        postAdded: {\n            reducer:(state, action) => {\n                state.push(action.payload)\n            },\n            prepare: (title, content, userId) => {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        user: userId,\n                        date: new Date().toDateString\n                    }\n                }   \n            }\n        },\n        \n        postUpdated(state, action) {\n            const { id, title, content } = action.payload\n            const existingPost = state.find(post => post.id === id)\n            if (existingPost) {\n              existingPost.title = title\n              existingPost.content = content\n            }\n          }\n    }\n});\n\n\nexport const {Â postAdded,postUpdated } = postsSlice.actions;\n\nexport default postsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,MAAMC,YAAY,GAAG,CACjB;EAAEC,EAAE,EAAE,GAAN;EAAWC,KAAK,EAAE,aAAlB;EAAiCC,OAAO,EAAE;AAA1C,CADiB,EAEjB;EAAEF,EAAE,EAAE,GAAN;EAAWC,KAAK,EAAE,aAAlB;EAAiCC,OAAO,EAAE;AAA1C,CAFiB,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAIN,WAAW,CAAC;EACnCO,IAAI,EAAG,OAD4B;EAEnCL,YAFmC;EAGnCM,QAAQ,EAAC;IACLC,SAAS,EAAE;MACPC,OAAO,EAAC,CAACC,KAAD,EAAQC,MAAR,KAAmB;QACvBD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;MACH,CAHM;MAIPC,OAAO,EAAE,CAACX,KAAD,EAAQC,OAAR,EAAiBW,MAAjB,KAA4B;QACjC,OAAO;UACHF,OAAO,EAAE;YACLX,EAAE,EAAEF,MAAM,EADL;YAELG,KAFK;YAGLC,OAHK;YAILY,IAAI,EAAED,MAJD;YAKLE,IAAI,EAAE,IAAIC,IAAJ,GAAWC;UALZ;QADN,CAAP;MASH;IAdM,CADN;;IAkBLC,WAAW,CAACV,KAAD,EAAQC,MAAR,EAAgB;MACvB,MAAM;QAAET,EAAF;QAAMC,KAAN;QAAaC;MAAb,IAAyBO,MAAM,CAACE,OAAtC;MACA,MAAMQ,YAAY,GAAGX,KAAK,CAACY,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACrB,EAAL,KAAYA,EAA/B,CAArB;;MACA,IAAImB,YAAJ,EAAkB;QAChBA,YAAY,CAAClB,KAAb,GAAqBA,KAArB;QACAkB,YAAY,CAACjB,OAAb,GAAuBA,OAAvB;MACD;IACF;;EAzBE;AAH0B,CAAD,CAA/B;AAiCP,OAAO,MAAM;EAAEI,SAAF;EAAYY;AAAZ,IAA4Bf,UAAU,CAACmB,OAA7C;AAEP,eAAenB,UAAU,CAACI,OAA1B"},"metadata":{},"sourceType":"module"}