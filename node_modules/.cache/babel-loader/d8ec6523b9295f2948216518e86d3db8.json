{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!',\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 1,\n    hooray: 2,\n    heart: 3,\n    rocket: 4,\n    eyes: 5\n  }\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text',\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 1,\n    hooray: 2,\n    heart: 3,\n    rocket: 4,\n    eyes: 11\n  }\n}];\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reactionAdded(state, action) {\n        const {\n          postId,\n          reaction\n        } = action.payload;\n        const existingPost = state.find(post => post.id === postId);\n\n        if (existingPost) {\n          existingPost.reactions[reaction]++;\n        }\n      },\n\n      reducer: (state, action) => {\n        state.push(action.payload);\n      },\n      prepare: (title, content, userId) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString()\n          }\n        };\n      }\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  reactionAdded,\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","postsSlice","name","reducers","postAdded","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","reducer","push","prepare","userId","user","postUpdated","actions"],"sources":["/Users/mcakmakali/Desktop/redux-example/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\nconst initialState = [\n  {\n    id: '1',\n    title: 'First Post!',\n    content: 'Hello!',\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\n    reactions: {\n      thumbsUp: 1,\n      hooray: 2,\n      heart: 3,\n      rocket: 4,\n      eyes: 5,\n    },\n  },\n  {\n    id: '2',\n    title: 'Second Post',\n    content: 'More text',\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\n    reactions: {\n      thumbsUp: 1,\n      hooray: 2,\n      heart: 3,\n      rocket: 4,\n      eyes: 11,\n    },\n  },\n]\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reactionAdded(state, action) {\n        const { postId, reaction } = action.payload\n        const existingPost = state.find((post) => post.id === postId)\n        if (existingPost) {\n          existingPost.reactions[reaction]++\n        }\n      },\n      reducer: (state, action) => {\n        state.push(action.payload)\n      },\n      prepare: (title, content, userId) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString(),\n          },\n        }\n      },\n    },\n\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { reactionAdded, postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,QAAoB,UAApB;AAEA,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GADN;EAEEC,KAAK,EAAE,aAFT;EAGEC,OAAO,EAAE,QAHX;EAIEC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;IAAEC,OAAO,EAAE;EAAX,CAAb,CAAH,CAAiCC,WAAjC,EAJR;EAKEC,SAAS,EAAE;IACTC,QAAQ,EAAE,CADD;IAETC,MAAM,EAAE,CAFC;IAGTC,KAAK,EAAE,CAHE;IAITC,MAAM,EAAE,CAJC;IAKTC,IAAI,EAAE;EALG;AALb,CADmB,EAcnB;EACEZ,EAAE,EAAE,GADN;EAEEC,KAAK,EAAE,aAFT;EAGEC,OAAO,EAAE,WAHX;EAIEC,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;IAAEC,OAAO,EAAE;EAAX,CAAb,CAAH,CAAgCC,WAAhC,EAJR;EAKEC,SAAS,EAAE;IACTC,QAAQ,EAAE,CADD;IAETC,MAAM,EAAE,CAFC;IAGTC,KAAK,EAAE,CAHE;IAITC,MAAM,EAAE,CAJC;IAKTC,IAAI,EAAE;EALG;AALb,CAdmB,CAArB;AA6BA,OAAO,MAAMC,UAAU,GAAGjB,WAAW,CAAC;EACpCkB,IAAI,EAAE,OAD8B;EAEpCf,YAFoC;EAGpCgB,QAAQ,EAAE;IACRC,SAAS,EAAE;MACTC,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;QAC3B,MAAM;UAAEC,MAAF;UAAUC;QAAV,IAAuBF,MAAM,CAACG,OAApC;QACA,MAAMC,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACzB,EAAL,KAAYoB,MAAjC,CAArB;;QACA,IAAIG,YAAJ,EAAkB;UAChBA,YAAY,CAAChB,SAAb,CAAuBc,QAAvB;QACD;MACF,CAPQ;;MAQTK,OAAO,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;QAC1BD,KAAK,CAACS,IAAN,CAAWR,MAAM,CAACG,OAAlB;MACD,CAVQ;MAWTM,OAAO,EAAE,CAAC3B,KAAD,EAAQC,OAAR,EAAiB2B,MAAjB,KAA4B;QACnC,OAAO;UACLP,OAAO,EAAE;YACPtB,EAAE,EAAEH,MAAM,EADH;YAEPI,KAFO;YAGPC,OAHO;YAIP4B,IAAI,EAAED,MAJC;YAKP1B,IAAI,EAAE,IAAIC,IAAJ,GAAWE,WAAX;UALC;QADJ,CAAP;MASD;IArBQ,CADH;;IAyBRyB,WAAW,CAACb,KAAD,EAAQC,MAAR,EAAgB;MACzB,MAAM;QAAEnB,EAAF;QAAMC,KAAN;QAAaC;MAAb,IAAyBiB,MAAM,CAACG,OAAtC;MACA,MAAMC,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACzB,EAAL,KAAYA,EAAjC,CAArB;;MACA,IAAIuB,YAAJ,EAAkB;QAChBA,YAAY,CAACtB,KAAb,GAAqBA,KAArB;QACAsB,YAAY,CAACrB,OAAb,GAAuBA,OAAvB;MACD;IACF;;EAhCO;AAH0B,CAAD,CAA9B;AAuCP,OAAO,MAAM;EAAEe,aAAF;EAAiBD,SAAjB;EAA4Be;AAA5B,IAA4ClB,UAAU,CAACmB,OAA7D;AAEP,eAAenB,UAAU,CAACa,OAA1B"},"metadata":{},"sourceType":"module"}