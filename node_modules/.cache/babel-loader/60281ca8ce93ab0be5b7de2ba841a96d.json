{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nexports.__esModule = true;\nexports.compileQuery = void 0;\n\nvar debug_1 = require(\"debug\");\n\nvar outvariant_1 = require(\"outvariant\");\n\nvar getComparatorsForValue_1 = require(\"./getComparatorsForValue\");\n\nvar isObject_1 = require(\"../utils/isObject\");\n\nvar log = debug_1.debug('compileQuery');\n/**\n * Compile a query expression into a function that accepts an actual entity\n * and returns a query execution result (whether the entity satisfies the query).\n */\n\nfunction compileQuery(query) {\n  log('%j', query);\n  return function (data) {\n    return Object.entries(query.where).map(function (_a) {\n      var _b = __read(_a, 2),\n          property = _b[0],\n          queryChunk = _b[1];\n\n      var actualValue = data[property];\n      log('executing query chunk on \"%s\":\\n\\n%j\\n\\non data:\\n\\n%j\\n', property, queryChunk, data);\n      log('actual value for \"%s\":', property, actualValue);\n\n      if (!queryChunk) {\n        return true;\n      } // If an entity doesn't have any value for the property\n      // is being queried for, treat it as non-matching.\n\n\n      if (actualValue == null) {\n        return false;\n      }\n\n      return Object.entries(queryChunk).reduce(function (acc, _a) {\n        var _b = __read(_a, 2),\n            comparatorName = _b[0],\n            expectedValue = _b[1];\n\n        if (!acc) {\n          return acc;\n        }\n\n        if (Array.isArray(actualValue)) {\n          log('actual value is array, checking if at least one item matches...', {\n            comparatorName: comparatorName,\n            expectedValue: expectedValue\n          });\n          /**\n           * @fixme Can assume `some`? Why not `every`?\n           */\n\n          return actualValue.some(function (value) {\n            return compileQuery({\n              where: queryChunk\n            })(value);\n          });\n        } // When the actual value is a resolved relational property reference,\n        // execute the current query chunk on the referenced entity.\n\n\n        if (actualValue.__type || isObject_1.isObject(actualValue)) {\n          return compileQuery({\n            where: queryChunk\n          })(actualValue);\n        }\n\n        var comparatorSet = getComparatorsForValue_1.getComparatorsForValue(actualValue);\n        log('comparators', comparatorSet);\n        var comparatorFn = comparatorSet[comparatorName];\n        log('using comparator function for \"%s\":', comparatorName, comparatorFn);\n        outvariant_1.invariant(comparatorFn, 'Failed to compile the query \"%j\": no comparator found for the chunk \"%s\". Please check the validity of the query.', query, comparatorName);\n        return comparatorFn(expectedValue, actualValue);\n      }, true);\n    }).every(Boolean);\n  };\n}\n\nexports.compileQuery = compileQuery;","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","exports","__esModule","compileQuery","debug_1","require","outvariant_1","getComparatorsForValue_1","isObject_1","log","debug","query","data","Object","entries","where","map","_a","_b","property","queryChunk","actualValue","reduce","acc","comparatorName","expectedValue","Array","isArray","some","__type","isObject","comparatorSet","getComparatorsForValue","comparatorFn","invariant","every","Boolean"],"sources":["/Users/mcakmakali/Desktop/redux-example/node_modules/@mswjs/data/lib/query/compileQuery.js"],"sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexports.__esModule = true;\nexports.compileQuery = void 0;\nvar debug_1 = require(\"debug\");\nvar outvariant_1 = require(\"outvariant\");\nvar getComparatorsForValue_1 = require(\"./getComparatorsForValue\");\nvar isObject_1 = require(\"../utils/isObject\");\nvar log = debug_1.debug('compileQuery');\n/**\n * Compile a query expression into a function that accepts an actual entity\n * and returns a query execution result (whether the entity satisfies the query).\n */\nfunction compileQuery(query) {\n    log('%j', query);\n    return function (data) {\n        return Object.entries(query.where)\n            .map(function (_a) {\n            var _b = __read(_a, 2), property = _b[0], queryChunk = _b[1];\n            var actualValue = data[property];\n            log('executing query chunk on \"%s\":\\n\\n%j\\n\\non data:\\n\\n%j\\n', property, queryChunk, data);\n            log('actual value for \"%s\":', property, actualValue);\n            if (!queryChunk) {\n                return true;\n            }\n            // If an entity doesn't have any value for the property\n            // is being queried for, treat it as non-matching.\n            if (actualValue == null) {\n                return false;\n            }\n            return Object.entries(queryChunk).reduce(function (acc, _a) {\n                var _b = __read(_a, 2), comparatorName = _b[0], expectedValue = _b[1];\n                if (!acc) {\n                    return acc;\n                }\n                if (Array.isArray(actualValue)) {\n                    log('actual value is array, checking if at least one item matches...', {\n                        comparatorName: comparatorName,\n                        expectedValue: expectedValue\n                    });\n                    /**\n                     * @fixme Can assume `some`? Why not `every`?\n                     */\n                    return actualValue.some(function (value) {\n                        return compileQuery({ where: queryChunk })(value);\n                    });\n                }\n                // When the actual value is a resolved relational property reference,\n                // execute the current query chunk on the referenced entity.\n                if (actualValue.__type || isObject_1.isObject(actualValue)) {\n                    return compileQuery({ where: queryChunk })(actualValue);\n                }\n                var comparatorSet = getComparatorsForValue_1.getComparatorsForValue(actualValue);\n                log('comparators', comparatorSet);\n                var comparatorFn = comparatorSet[comparatorName];\n                log('using comparator function for \"%s\":', comparatorName, comparatorFn);\n                outvariant_1.invariant(comparatorFn, 'Failed to compile the query \"%j\": no comparator found for the chunk \"%s\". Please check the validity of the query.', query, comparatorName);\n                return comparatorFn(expectedValue, actualValue);\n            }, true);\n        })\n            .every(Boolean);\n    };\n}\nexports.compileQuery = compileQuery;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}